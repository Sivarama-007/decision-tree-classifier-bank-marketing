# -*- coding: utf-8 -*-
"""decision-tree-classifier-bank-marketing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1o2VyUXEahR7rcS5ZJdedeMkoSUjYSRtk
"""

from google.colab import files
uploaded = files.upload()

# Install required libraries (if not already installed)
!pip install seaborn matplotlib pandas scikit-learn

# Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix
from sklearn.preprocessing import LabelEncoder

# Load the Bank Marketing dataset
df = pd.read_csv('bank.csv', delimiter=';')

# Display the first few rows of the dataset
print("First few rows of the dataset:")
df.head()

# Data Cleaning and Preprocessing
# Check for missing values
print("\nMissing values in each column:")
print(df.isnull().sum())

# Encode categorical variables using Label Encoding
labelencoder = LabelEncoder()
for column in df.select_dtypes(include=['object']).columns:
    df[column] = labelencoder.fit_transform(df[column])

# Feature Selection (X) and Target Variable (y)
X = df.drop(columns='y')  # Features (Demographic and behavioral data)
y = df['y']  # Target (purchase decision)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Initialize the Decision Tree Classifier
clf = DecisionTreeClassifier(random_state=42)

# Train the classifier on the training data
clf.fit(X_train, y_train)

# Make predictions on the test set
y_pred = clf.predict(X_test)

# Evaluate the model
print("\nClassification Report:")
print(classification_report(y_test, y_pred))

print("\nAccuracy Score:")
print(accuracy_score(y_test, y_pred))

# Plotting the Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=['No', 'Yes'], yticklabels=['No', 'Yes'])
plt.title('Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()

# Plot Feature Importance
plt.figure(figsize=(10, 6))
feature_importances = pd.Series(clf.feature_importances_, index=X.columns).sort_values(ascending=False)
feature_importances.plot(kind='barh', color='teal')
plt.title('Feature Importance')
plt.show()